#!/bin/bash

# Configs (Prefix with Plugin name)

# Plugin configs
PLUGIN_PLUGIN_COMMAND="plugin"
PLUGIN_PLUGIN_ALLOW_ALIAS="false"
PLUGIN_PLUGIN_HELP_COMMAND="plugin"
PLUGIN_PLUGIN_HELP_TEXT="Install/Update third party plugins."
PLUGIN_PLUGIN_FUNCTION="pluginEntryPoint"
PLUGIN_PLUGIN_HELP="pluginHelp"

# Entry point function
function pluginEntryPoint {

	case $2 in
		update)
		  pluginUpdate $3
      ;;
    version)
      pluginVersion $3
      ;;
    install)
      pluginInstall $3 $4
      ;;
    help|--help|-h|*)
		  pluginCommandHelp
		  ;;
	esac

}

# Install plugin
function pluginInstall {

  if [ -z "$1" ]; then
    message "ERROR" "Please pass in plugin name."
  fi

  if [ -z "$2" ]; then
    message "ERROR" "Please pass in plugin repo."
  fi

  local PLUGINNAME=$1
  local PLUGINREPO=$2
  local PLUGINROOT=$PLUGINPATH/$PLUGINNAME

  if [ -d "$PLUGINROOT" ]; then
    message "ERROR" "Plugin already installed"
  fi

  mkdir $PLUGINROOT

  if ! [ -d "$PLUGINROOT" ]; then
    message "ERROR" "There was an error creating the new plugin directory."
  fi

  cd $PLUGINROOT

  git clone $PLUGINREPO .

  if ! [ -d ".git" ]; then
    rm -rf $PLUGINROOT
		message "ERROR" "There was an issue installing the plugin."
	fi

	if ! [ -f "$PLUGINNAME" ]; then
	  rm -rf $PLUGINROOT
		message "ERROR" "There was an issue installing the plugin."
	fi

  message "INFO" "Plugin installed successfully."
}

# Run logic to update
function pluginUpdate {

  local PLUGINNAME=$1
  local PLUGINROOT=$PLUGINPATH/$PLUGINNAME

  if ! [ -d "$PLUGINROOT" ]; then
    message "ERROR" "Could not find plugin directory"
  fi

  cd "$PLUGINROOT"

	if ! [ -d "$PLUGINROOT/.git" ]; then
		message "ERROR" "The plugin $PLUGINNAME is not a third party plugin."
	fi

	debug "Checking setup as repo complete"

    git fetch &> /dev/null

    if [ "$(git rev-parse origin/master)" != "$(git rev-parse HEAD)" ]; then
        message "INFO" "New version of plugin $PLUGINNAME found, updating..."
        git pull origin master &> /dev/null
        message "INFO" "Plugin $PLUGINNAME updated..."
        exit 1
    fi
    message "INFO" "Plugin $PLUGINNAME is already on the latest version."
}

# Get plugin version
function pluginVersion {

  local PLUGINNAME=$1
  local PLUGINNAMEUPPER=$(echo $PLUGINNAME | tr /a-z/ /A-Z/)

  if [ ! -z $(eval echo ${PLUGINNAMEUPPER}_PLUGIN_VERSION) ]; then
    message "INFO" "Plugin $PLUGINNAME version: $(eval echo "$"${PLUGINNAMEUPPER}_PLUGIN_VERSION)"
  else
    message "ERROR" "Could not find plugin $PLUGINNAME version."
  fi

}

# Plugin command help
function pluginCommandHelp {

  printf "\nUsage: eiger plugin [COMMAND] PLUGIN\n\nRun plugin actions.\n\n"

  printf "Commands:\n\n"
  printf "  update\t\tUpdate third party plugin.\n"
  printf "  version\t\tGet installed version of plugin.\n"

}